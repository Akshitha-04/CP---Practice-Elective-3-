{
    "linkedlist.py": [
        {
            "operation": "PASTE",
            "lines": 68,
            "keyStrokeTimeStamp": "Mon Jul 26 2021 16:47:21",
            "keyStrokeInfo": "class Element(object):\r\n    def _init_(self, value):\r\n        self.value = value\r\n        self.next = None\r\n        \r\nclass LinkedList(object):\r\n    def _init_(self, head=None):\r\n        self.head = head\r\n        \r\n    def append(self, new_element):\r\n        # Your code goes here\r\n        n=self.head\r\n        while n.next!=None:\r\n            n=n.next\r\n        n.next=new_element\r\n     \r\n            \r\n    def get_position(self, position):\r\n        \"\"\"Get an element from a particular position.\r\n        Assume the first position is \"1\".\r\n        Return \"None\" if position is not in the list.\"\"\"\r\n        # Your code goes here\r\n        counter=1\r\n        n=self.head\r\n        if position<1:\r\n            return None\r\n     \r\n        while n and counter <= position:\r\n            if counter==position:\r\n                return n\r\n            n=n.next\r\n            counter = counter+1\r\n        return None\r\n        \r\n  \r\n    def insert(self, new_element, position):\r\n        \"\"\"Insert a new node at the given position.\r\n        Assume the first position is \"1\".\r\n        Inserting at position 3 means between\r\n        the 2nd and 3rd elements.\"\"\"\r\n        # Your code goes here\r\n      \r\n        counter=1\r\n        n=self.head\r\n        if position>1:\r\n            while n and counter<position:\r\n                if counter == position - 1:\r\n                    new_element.next = n.next\r\n                    n.next = new_element\r\n                n = n.next\r\n                counter += 1\r\n        elif position == 1:\r\n            new_element.next = self.head\r\n            self.head = new_element\r\n    \r\n    def delete(self, value):\r\n        \"\"\"Delete the first node with a given value.\"\"\"\r\n        # Your code goes here\r\n        n = self.head\r\n        previous = None\r\n        while n.value != value and n.next:\r\n            previous = n\r\n            n = n.next\r\n        if n.value == value:\r\n            if previous:\r\n                previous.next = n.next\r\n            else:\r\n                self.head = n.next",
            "position": "11,1"
        },
        {
            "operation": "PASTE",
            "lines": 71,
            "keyStrokeTimeStamp": "Mon Jul 26 2021 16:53:22",
            "keyStrokeInfo": "class Element(object):\r\n\tdef _init_(self, value):\r\n\t\tself.value = value\r\n\t\tself.next = None\r\n\t\t\r\nclass LinkedList(object):\r\n\tdef _init_(self, head=None):\r\n\t\tself.head = head\r\n\t\t\r\n\tdef append(self, new_element):\r\n\t\t# Your code goes here\r\n\t\t#pass\r\n\t\tcurrent = self.head\r\n\t\tif self.head:\r\n\t\t\twhile current.next!=None:\r\n\t\t\t\tcurrent = current.next\r\n\t\t\tcurrent.next = new_element\r\n\t\telse:\r\n\t\t\tself.head = new_element\r\n\t\t\t\r\n\tdef get_position(self, position):\r\n\t\t\"\"\"Get an element from a particular position.\r\n\t\tAssume the first position is \"1\".\r\n\t\tReturn \"None\" if position is not in the list.\"\"\"\r\n\t\t# Your code goes here\r\n\t\t#pass\r\n\t\tcounter = 1\r\n\t\tcurrent = self.head\r\n\t\tif position < 1:\r\n\t\t\treturn None\r\n\t\twhile current and counter <= position:\r\n\t\t\tif counter == position:\r\n\t\t\t\treturn current\r\n\t\t\tcurrent = current.next\r\n\t\t\tcounter += 1\r\n\t\treturn None\r\n\t\t\r\n\r\n\tdef insert(self, new_element, position):\r\n\t\t\"\"\"Insert a new node at the given position.\r\n\t\tAssume the first position is \"1\".\r\n\t\tInserting at position 3 means between\r\n\t\tthe 2nd and 3rd elements.\"\"\"\r\n\t\t# Your code goes here\r\n\t\t#pass\r\n\t\tif position == 1:\r\n\t\t\tnew_element.next = self.head\r\n\t\t\tself.head = new_element\r\n\t\telse:\r\n\t\t\tprev = self.get_position(position - 1)\r\n\t\t\tnext_element = prev.next\r\n\t\t\t#assign new connections\r\n\t\t\tprev.next = new_element\r\n\t\t\tnew_element.next = next_element\r\n\t\r\n\t\t \r\n\t\r\n\tdef delete(self, value):\r\n\t\t\"\"\"Delete the first node with a given value.\"\"\"\r\n\t\t# Your code goes here\r\n\t\t#pass\r\n\t\tcurrent = self.head\r\n\t\tprevious = None\r\n\t\twhile current.value != value and current.next:\r\n\t\t\tprevious = current\r\n\t\t\tcurrent = current.next\r\n\t\tif current.value == value:\r\n\t\t\tif previous:\r\n\t\t\t\tprevious.next = current.next\r\n\t\t\telse:\r\n\t\t\t\tself.head = current.next",
            "position": "11,1"
        },
        {
            "operation": "PASTE",
            "lines": 71,
            "keyStrokeTimeStamp": "Tue Jul 27 2021 16:51:26",
            "keyStrokeInfo": "class Element(object):\r\n\tdef _init_(self, value):\r\n\t\tself.value = value\r\n\t\tself.next = None\r\n\t\t\r\nclass LinkedList(object):\r\n\tdef _init_(self, head=None):\r\n\t\tself.head = head\r\n\t\t\r\n\tdef append(self, new_element):\r\n\t\t# Your code goes here\r\n\t\t#pass\r\n\t\tcurrent = self.head\r\n\t\tif self.head:\r\n\t\t\twhile current.next!=None:\r\n\t\t\t\tcurrent = current.next\r\n\t\t\tcurrent.next = new_element\r\n\t\telse:\r\n\t\t\tself.head = new_element\r\n\t\t\t\r\n\tdef get_position(self, position):\r\n\t\t\"\"\"Get an element from a particular position.\r\n\t\tAssume the first position is \"1\".\r\n\t\tReturn \"None\" if position is not in the list.\"\"\"\r\n\t\t# Your code goes here\r\n\t\t#pass\r\n\t\tcounter = 1\r\n\t\tcurrent = self.head\r\n\t\tif position < 1:\r\n\t\t\treturn None\r\n\t\twhile current and counter <= position:\r\n\t\t\tif counter == position:\r\n\t\t\t\treturn current\r\n\t\t\tcurrent = current.next\r\n\t\t\tcounter += 1\r\n\t\treturn None\r\n\t\t\r\n\r\n\tdef insert(self, new_element, position):\r\n\t\t\"\"\"Insert a new node at the given position.\r\n\t\tAssume the first position is \"1\".\r\n\t\tInserting at position 3 means between\r\n\t\tthe 2nd and 3rd elements.\"\"\"\r\n\t\t# Your code goes here\r\n\t\t#pass\r\n\t\tif position == 1:\r\n\t\t\tnew_element.next = self.head\r\n\t\t\tself.head = new_element\r\n\t\telse:\r\n\t\t\tprev = self.get_position(position - 1)\r\n\t\t\tnext_element = prev.next\r\n\t\t\t#assign new connections\r\n\t\t\tprev.next = new_element\r\n\t\t\tnew_element.next = next_element\r\n\t\r\n\t\t \r\n\t\r\n\tdef delete(self, value):\r\n\t\t\"\"\"Delete the first node with a given value.\"\"\"\r\n\t\t# Your code goes here\r\n\t\t#pass\r\n\t\tcurrent = self.head\r\n\t\tprevious = None\r\n\t\twhile current.value != value and current.next:\r\n\t\t\tprevious = current\r\n\t\t\tcurrent = current.next\r\n\t\tif current.value == value:\r\n\t\t\tif previous:\r\n\t\t\t\tprevious.next = current.next\r\n\t\t\telse:\r\n\t\t\t\tself.head = current.next",
            "position": "11,1"
        }
    ],
    "test_solution.py": [
        {
            "operation": "PASTE",
            "lines": 29,
            "keyStrokeTimeStamp": "Tue Jul 27 2021 16:52:42",
            "keyStrokeInfo": "import os,sys\r\nsys.path.append(os.getcwd())\r\nfrom linkedlist import LinkedList \r\nfrom linkedlist import Element \r\nimport pytest\r\n\r\ne1 = Element(1)\r\ne2 = Element(2)\r\ne3 = Element(3)\r\n\r\nll = LinkedList(e1)\r\nll.append(e2)\r\nll.append(e3)\r\n\r\n@pytest.mark.parametrize(\"x,result\",[(3,3),(2,2)])\r\ndef test_get_position(x,result):    \r\n    assert ll.get_position(x).value == result\r\n\r\n@pytest.mark.parametrize(\"position,result\",[(3,4)])\r\ndef test_insert(position,result):\r\n    e4 = Element(4)\r\n    ll.insert(e4,3)\r\n    assert ll.get_position(position).value == result\r\n\r\n\r\n@pytest.mark.parametrize(\"val,result\",[(1,2),(2,4),(3,3)])\r\ndef test_delete(val,result):\r\n    ll.delete(1)\r\n    assert ll.get_position(val).value == result",
            "position": "2,1"
        }
    ]
}